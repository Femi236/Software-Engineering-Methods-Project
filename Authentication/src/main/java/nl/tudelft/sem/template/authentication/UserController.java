
package nl.tudelft.sem.template.authentication;

import javax.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private transient UserRepository userRepository;

    @Autowired
    private transient UserService userService;

    @Autowired
    private transient UserServices userServices;

    /**.
     * post request method
     *
     * @param id of the user
     * @param firstName of the user
     * @param lastName of the user
     * @param password of the user
     * @param role of the user
     * @param netId of the user
     * @return string saved
     */
    @PostMapping(path = "/register") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestParam int id, @RequestParam String firstName,
                                           @RequestParam String lastName,
                                           @RequestParam String password,
                                           @RequestParam String role, @RequestParam String netId) {

        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setId(id);
        n.setFirstName(firstName);
        n.setLastName(lastName);
        n.setPassword(password);
        n.setRole(role);
        n.setNetId(netId);
        try {
            userService.saveUser(n);
        } catch (Exception e) {
            return "User with netId already exists";
        }

        //userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    public void setUserRepository(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    /**
     * Return the id of the current user.
     *
     * @return the id
     */
    @GetMapping(path = "getUserId")
    public @ResponseBody int getUserId() {
        String user = SecurityContextHolder.getContext().getAuthentication().getName();
        try {
            int id = userRepository.findByNetId(user).getId();
            return id;
        } catch (Exception e) {
            return -1;
        }
    }

    @PostMapping(path = "/getUser")
    public @ResponseBody User getUser(@RequestParam int id) {
        return userRepository.findById(id).orElse(null);
    }

    @PutMapping(path = "/update")
    @ResponseBody
    public String updateUser(@RequestParam int id, @RequestParam String firstName,
                                  @RequestParam String lastName, @RequestParam String password,
                             @RequestParam String role, @RequestParam String netId) {
        return userServices.updateUser(id, firstName, lastName, password, role, netId);
    }

    /**
          * DELETE Endpoint to delete a user by ID.
          *
          * @return http 200 +  if user found.
          * @throws EntityNotFoundException if user does not exist.
          */
    @DeleteMapping("/delete")
    @ResponseBody
    public ResponseEntity deleteUser(@RequestParam Integer id) {
        if (userRepository.existsById(id)) {
            userRepository.deleteById(id);
            return ResponseEntity.ok().build();
        }
        throw new EntityNotFoundException("user not found for parameters {id=" + id + "}.");
    }
}